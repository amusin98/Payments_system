// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Payments_system.Models;
using System;

namespace Payments_system.Migrations
{
    [DbContext(typeof(PaymentsContext))]
    [Migration("20171018055628_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Payments_system.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Balance");

                    b.Property<int>("CardId");

                    b.Property<bool>("IsBlocked");

                    b.HasKey("AccountId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Payments_system.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Balance");

                    b.Property<int>("UserId");

                    b.HasKey("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Payments_system.Models.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GoalName");

                    b.HasKey("GoalId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Payments_system.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<double>("Amount");

                    b.Property<string>("Date");

                    b.Property<int>("GoalId");

                    b.HasKey("PaymentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("GoalId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Payments_system.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Surname");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Payments_system.Models.Account", b =>
                {
                    b.HasOne("Payments_system.Models.Card", "Card")
                        .WithOne("Account")
                        .HasForeignKey("Payments_system.Models.Account", "CardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Payments_system.Models.Card", b =>
                {
                    b.HasOne("Payments_system.Models.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Payments_system.Models.Payment", b =>
                {
                    b.HasOne("Payments_system.Models.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Payments_system.Models.Goal", "Goal")
                        .WithMany("Payments")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
